using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using UrlShortener2.Data.Entities;

namespace UrlShortener2.Data
{
    public class ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : IdentityDbContext(options)
    {
        public DbSet<ShortUrl> ShortenedUrls { get; set; } = null!;
        public DbSet<AboutEntry> AboutEntries { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            builder.Entity<ShortUrl>()
                .Property(u => u.Id)
                .ValueGeneratedOnAdd();

            builder.Entity<ShortUrl>(entity =>
            {
                entity.HasOne(e => e.User)
                    .WithMany()
                    .HasForeignKey(e => e.UserId)
                    .IsRequired();
            });

            // Seed roles
            var adminRole = new IdentityRole("ADMIN");
            adminRole.NormalizedName = "ADMIN";

            var userRole = new IdentityRole("USER");
            userRole.NormalizedName = "USER";

            builder.Entity<IdentityRole>().HasData(
                adminRole,
                userRole
            );

            builder.Entity<AboutEntry>().HasData(
                new AboutEntry
                {
                    Id = 1,
                    Title = "About algorithm",
                    Content = "This is probably the most popular url shortening algorithm. The first step is to generate SHA256 hash of the original URL. Then, application encodes binary data of the hash into Base64 string. After cleaning up the string from URL-unsafe characters, generated by Base64 encoding ('+', '/' and '='), the application takes the first 8 characters of the string and saves it as short address on our domain in the database, alongside the original URL. When user requests the short URL, the application looks up the original URL in the database and redirects the user to the original URL.",
                }
            );
        }
    }
}
